{"version":3,"sources":["Container.js","Footer.js","client.js","forms/AddStudentForm.js","Notification.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","style","width","margin","textAlign","children","Footer","className","undefined","numberOfStudents","backgroundColor","marginRight","size","onClick","handleAddStudentClickEvent","type","checkStatus","response","ok","error","Error","statusText","json","then","e","Promise","reject","getAllStudents","fetch","inputBottomMargin","marginBottom","tagStyle","color","AddStudenForm","initialValues","firstName","lastName","email","gender","validate","values","errors","test","includes","onSubmit","student","setSubmitting","headers","method","body","JSON","stringify","addNewStudent","onSuccess","catch","onFailure","finally","touched","handleChange","handleBlur","handleSubmit","isSubmitting","submitForm","isValid","name","onChange","onBlur","value","placeholder","disabled","openNotification","message","description","notification","errorNotification","App","state","students","isFetching","isAddStudentModalVisable","openAddStudentModal","setState","closeAddStudentModal","fetchStudents","res","console","log","httpStatus","this","commonElements","title","visible","onOk","onCancel","AddStudentForm","length","indicator","LoadingOutlined","fontSize","spin","columns","key","render","text","charAt","dataIndex","dataSource","pagination","rowKey","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ab302b3.chunk.js","sourcesContent":["import React from 'react'\r\nconst Container = props => (\r\n    <div style={{width:'1400px', margin: '0 auto', textAlign:'center'}}>\r\n        {props.children}\r\n    </div>\r\n);\r\n\r\nexport default Container","import React from 'react';\r\nimport Container from './Container';\r\nimport {Button, Avatar} from 'antd';\r\nimport './Footer.css'\r\n\r\nconst Footer = (props) => (\r\n    <div className='footer'>\r\n        <Container>\r\n            {props.numberOfStudents !== undefined ? \r\n            <Avatar style ={{backgroundColor: '#f56a00', marginRight: '5px'}}\r\n                    size='large'> {props.numberOfStudents} </Avatar> : null\r\n            }\r\n            <Button onClick={() => props.handleAddStudentClickEvent()} type='primary'>Add New Student</Button>\r\n        </Container>\r\n    </div>\r\n);\r\n\r\nexport default Footer;","import fetch from 'unfetch';\r\n\r\nconst checkStatus = response => {\r\n    if(response.ok) {\r\n        return response;\r\n    } else {\r\n        let error = new Error(response.statusText);\r\n        error.response = response;\r\n        response.json().then(e => {\r\n            error.error = e;\r\n        });\r\n        return Promise.reject(error);\r\n    }\r\n}\r\n\r\nexport const getAllStudents = () => \r\n    fetch('api/students').then(checkStatus);\r\n\r\nexport const addNewStudent = student => \r\n    fetch('api/students', {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        method: 'POST',\r\n        body: JSON.stringify(student)\r\n    })\r\n    .then(checkStatus);","import React from 'react';\r\nimport {Formik} from 'formik';\r\nimport {Input, Button, Tag} from 'antd';\r\nimport {addNewStudent} from '../client';\r\n\r\nconst inputBottomMargin = {marginBottom: '5px'};\r\nconst tagStyle = {backgroundColor: '#f50', color: 'white', ...inputBottomMargin};\r\n\r\nconst AddStudenForm = (props) => (\r\n    <Formik\r\n        initialValues={{ firstName: '', lastName: '', email: '', gender: ''}}\r\n        validate={values => {\r\n        const errors = {};\r\n        \r\n        if(!values.firstName) {\r\n            errors.firstName = 'First Name Required';\r\n        }\r\n        if(!values.lastName) {\r\n            errors.lastName = 'Last Name Required';\r\n        }\r\n        if (!values.email) {\r\n            errors.email = 'Email Required ';\r\n        } else if (\r\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n        ) {\r\n            errors.email = 'Invalid Email Address';\r\n        }\r\n        if(!values.gender) {\r\n            errors.gender = 'Gender Required';\r\n        } else if(!['MALE','male','FEMALE','female'].includes(values.gender)) {\r\n            errors.gender = 'Invalid Gender';\r\n        }\r\n        return errors;\r\n        }}\r\n        onSubmit={(student, { setSubmitting }) => {\r\n            addNewStudent(student).then(() => {\r\n                props.onSuccess();\r\n            }).catch(error => {\r\n                props.onFailure(error)\r\n            }).finally(()=> {\r\n                setSubmitting(false);\r\n            });\r\n        }}\r\n    >\r\n        {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        submitForm,\r\n        isValid\r\n        /* and other goodies */\r\n        }) => (\r\n        <form onSubmit={handleSubmit}>\r\n                <Input\r\n                style={inputBottomMargin}\r\n                name=\"firstName\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.firstName}\r\n                placeholder='First Name E.g John'\r\n                />\r\n                {errors.firstName && touched.firstName && <Tag style={tagStyle}>{errors.firstName}</Tag>}\r\n                <Input\r\n                style={inputBottomMargin}\r\n                name=\"lastName\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.lastName}\r\n                placeholder='Last Name E.g Smith'\r\n                />\r\n                {errors.lastName && touched.lastName && <Tag style={tagStyle}>{errors.lastName}</Tag>}\r\n                <Input\r\n                style={inputBottomMargin}\r\n                name=\"email\"\r\n                type='email'\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.email}\r\n                placeholder='email: example@gmail.com'\r\n                />\r\n                {errors.email && touched.email && <Tag style={tagStyle}>{errors.email}</Tag>}\r\n                <Input\r\n                style={inputBottomMargin}\r\n                name=\"gender\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.gender}\r\n                placeholder='Gender: FEMALE or MALE?'\r\n                />\r\n                {errors.gender && touched.gender && <Tag style={tagStyle}>{errors.gender}</Tag>}\r\n                <Button \r\n                onClick ={ () => submitForm() } \r\n                type=\"submit\" \r\n                disabled={isSubmitting | (touched && !isValid)}>\r\n            Submit\r\n            </Button>\r\n        </form>\r\n        )}\r\n    </Formik>\r\n    );\r\n\r\nexport default AddStudenForm;\r\n","import { notification } from 'antd';\r\n\r\nconst openNotification = (type, message, description) => {\r\n    notification[type]({\r\n      message,\r\n      description\r\n    });\r\n  };\r\n\r\n  export const successNotification = (message, description) => openNotification('success', message, description);\r\n  export const infoNotification = (message, description) => openNotification('info', message, description);\r\n  export const warningNotification = (message, description) => openNotification('warning', message, description);\r\n  export const errorNotification = (message, description) => openNotification('error', message, description);","import React, { Component } from 'react';\nimport Container from './Container';\nimport Footer from './Footer';\nimport './App.css';\nimport {getAllStudents} from './client';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport AddStudentForm from './forms/AddStudentForm';\nimport { errorNotification } from './Notification';\nimport {\n  Table, \n  Avatar,\n  Spin,\n  Modal,\n  Empty \n} from 'antd';\n\nconst getIndicatorIcon = () => <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\n\nclass App extends Component {\n\n  state = {\n    students: [],\n    isFetching: false,\n    isAddStudentModalVisable: false\n  }\n\n  componentDidMount () {\n    this.fetchStudents();\n  }\n\n  openAddStudentModal = () => this.setState({isAddStudentModalVisable: true})\n\n  closeAddStudentModal = () => this.setState({isAddStudentModalVisable: false})\n\n  fetchStudents = () => {\n    this.setState({\n      isFetching: true\n    });\n    getAllStudents()\n    .then(res => res.json()\n    .then(students => {\n      console.log(students);\n      this.setState({\n        students,\n        isFetching: false\n      });\n    })).catch(error => {\n      console.log(error.error)\n      const description = error.error.httpStatus;\n      const message = error.error.message;\n      errorNotification(message, description);\n      this.setState({isFetching:false});\n    });\n  }\n\n  render() {\n\n    const {students, isFetching, isAddStudentModalVisable} = this.state;\n    \n    const commonElements = () => (\n      <div>\n        <Modal \n          title='Add new student'\n          visible={isAddStudentModalVisable}\n          onOk={this.closeAddStudentModal}\n          onCancel={this.closeAddStudentModal}\n          width={1000}>\n            <AddStudentForm \n              onSuccess={() => {\n                this.closeAddStudentModal();\n                this.fetchStudents();\n              }}\n              onFailure = { (error) => {\n                const description = error.error.httpStatus;\n                const message = error.error.message;\n                console.log(JSON.stringify(error))\n                errorNotification(message, description)\n              }}\n            />\n        </Modal>\n        <Footer \n          numberOfStudents = {students.length}\n          handleAddStudentClickEvent={this.openAddStudentModal}\n        />\n      </div>\n    )\n\n    if(isFetching) {\n      return (\n        <Container>\n          <Spin indicator={getIndicatorIcon()}/>\n        </Container>\n      );\n    }\n\n    if (students && students.length){\n\n      const columns = [\n        {\n          title: '',\n          key: 'avatar',\n          render: (text, student) => (\n            <Avatar size='large'>\n              {\n                `${student.firstName.charAt(0)}${student.lastName.charAt(0)}`\n              }\n            </Avatar>\n          )\n        },\n        {\n          title: 'Student Id',\n          dataIndex: 'studentId',\n          key: 'studentId',\n        },\n        {\n          title: 'First Name',\n          dataIndex: 'firstName',\n          key: 'firstName',\n        },\n        {\n          title: 'Last Name',\n          dataIndex: 'lastName',\n          key: 'lastName',\n        },\n        {\n          title: 'Email',\n          dataIndex: 'email',\n          key: 'email',\n        },\n        {\n          title: 'Gender',\n          dataIndex: 'gender',\n          key: 'gender',\n        }\n    ];\n\n    return (\n      <Container>\n        <Table \n          style={{marginBottom: '70px'}}\n          dataSource={students} \n          columns={columns} \n          pagination={false}\n          rowKey='studentId'/>\n          {commonElements()}\n      </Container>\n      );\n  }\n\n    return  (\n      <Container>\n        <Empty description={\n          <h1>No Students Found</h1>\n        }/>\n        {commonElements()}\n      </Container>\n      )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}